rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Allow folder listing for voice samples
    match /voice-samples/{userId}/{voiceName} {
      allow read: if 
        request.auth != null 
        && request.auth.uid == userId 
        && request.auth.token.email_verified
        && firestore.exists(/databases/(default)/documents/users/$(userId))
        && firestore.get(/databases/(default)/documents/users/$(userId)).data.plan == 'premium'
        && firestore.get(/databases/(default)/documents/users/$(userId)).data.stripeSubscriptionStatus == 'active'

      // Individual file rules remain nested here
      match /{fileName} {
        // Create (upload) permissions
        allow create: if 
          request.auth != null 
          && request.auth.uid == userId 
          && request.auth.token.email_verified
          && firestore.get(/databases/(default)/documents/users/$(userId)).data.plan == 'premium'
          && firestore.get(/databases/(default)/documents/users/$(userId)).data.stripeSubscriptionStatus == 'active'
          && request.resource.contentType.matches('audio/(mpeg|wav|mp3|ogg|webm)')
          && request.resource.size < 20 * 1024 * 1024;

        // Delete permissions
        allow delete: if 
          request.auth != null 
          && request.auth.uid == userId 
          && request.auth.token.email_verified
          && firestore.exists(/databases/(default)/documents/users/$(userId))
          && firestore.get(/databases/(default)/documents/users/$(userId)).data.plan == 'premium'
          && firestore.get(/databases/(default)/documents/users/$(userId)).data.stripeSubscriptionStatus == 'active';

        allow read: if true; // Inherits parent read permissions
      }
    }

    match /tts/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null 
                         && request.auth.uid == userId 
                         && request.auth.token.email_verified;
    }

    // Rules for story content - admin only
    match /stories/{storyId}/{allPaths=**} {
      // Restrict both read and write to admin-only
      allow read, write: if request.auth != null 
                         && request.auth.token.admin == true;
    }
  }
}